I"E<!--![](/images/demo/demo-landscape.jpg) -->

<h3 id="들어가기-전에">들어가기 전에.</h3>

<p>우연히 교보문고에서 보았는데 제목부터 흥미로워서 도서대장으로 구매했는데, 내용이 좋아서 이번 위클리에서 공유하려고 합니다. 디자이너에게 친숙하지 않은 <strong>‘객체 지향’</strong> 이라는 단어에 겁 먹을 수 있는데, 책의 내용은 워크북에 조금 더 가까워서 이해가 잘 되는 편입니다.</p>

<p>이번 프리젠테이션에서는 객체 지향 UI 디자인의 개념과 간단한(아마도?) 프로세스만 공유할 예정입니다. 이후에 기회가 되면 <strong>모달과 모달리스, 모달리스 신봉하기</strong> 라는 내용도 공유해보겠습니다.</p>

<p>(모든 형태에 서비스, UI에 객체 지향 UI를 바탕으로 설계 해야 한다는 것은 아닙니다. 중요한 점은 각각 서비스, 구조에 맞는 방법론이 있으며, 그 방법론을 <strong>올바르게</strong> 이해하고 <strong>잘</strong> 적용하는게 중요합니다.)</p>

<p>(무언가 구질구질 하지만.. 부연하면 굳이 방법론이 필요 없는 경우도 있습니다..)</p>

<h1 id="객체-지향-프로그래밍">객체 지향 프로그래밍</h1>

<h2 id="객체-지향-프로그래밍이란">객체 지향 프로그래밍이란?</h2>

<blockquote>
  <p>객체 지향 프로그래밍은 <a href="https://ko.wikipedia.org/wiki/%EC%BB%B4%ED%93%A8%ED%84%B0_%ED%94%84%EB%A1%9C%EA%B7%B8%EB%9E%A8">컴퓨터 프로그램</a> 을 <a href="https://ko.wikipedia.org/wiki/%EB%AA%85%EB%A0%B9%EC%96%B4_(%EC%BB%B4%ED%93%A8%ED%8C%85)">명령어</a> 의 목록으로 보는 시각에서 벗어나 여러 개의 독립된 단위, 즉 “<a href="https://ko.wikipedia.org/wiki/%EA%B0%9D%EC%B2%B4_(%EC%BB%B4%ED%93%A8%ED%84%B0_%EA%B3%BC%ED%95%99)">객체</a>“들의 모임으로 파악하고자 하는 것이다. 각각의 객체는 <a href="https://ko.wikipedia.org/wiki/%EB%A9%94%EC%8B%9C%EC%A7%80">메시지</a>를 주고받고, <a href="https://ko.wikipedia.org/wiki/%EB%8D%B0%EC%9D%B4%ED%84%B0">데이터</a>를 처리할 수 있다.</p>
</blockquote>

<p>참고) <a href="https://ko.wikipedia.org/wiki/%EA%B0%9D%EC%B2%B4_%EC%A7%80%ED%96%A5_%ED%94%84%EB%A1%9C%EA%B7%B8%EB%9E%98%EB%B0%8D">https://ko.wikipedia.org/wiki/객체<em>지향</em>프로그래밍</a></p>

<p>객체 지향 UI 디자인은 이름에서 알 수 있듯이 객체 지향 프로그래밍에서 나온 개념입니다. 객체 지향 프로그래밍은 일종의 개발 패러다임으로 흥미롭게도 <strong>GUI가 등장하면서 급부상한 개념입니다.</strong> 이전에는 <a href="https://ko.wikipedia.org/wiki/%EC%A0%88%EC%B0%A8%EC%A0%81_%ED%94%84%EB%A1%9C%EA%B7%B8%EB%9E%98%EB%B0%8D">절차적 프로그래밍</a>이 주류를 이루었는데, 절차적 프로그래밍이란 쉽게 이야기 하면 명령어를 바탕으로 하는 프로그래밍입니다. (ex 터미널, 커멘드 라인)</p>

<p>GUI가 등장하고 복잡한 화면과 여러개의 창이 함께 동작하게 되면서, 한 개의 명령어를 보내더라도 각 창에서 다른 결과를 보여줘야 했고 서로 상호작용이 가능해야 했습니다. (이런 복잡한 동작은 절차적 프로그래밍으로는 해결하기 매우 어렵습니다. 마치 급여정산을 ‘예/아니오’ 로 해야하는..)</p>

<p>절차적 프로그래밍의 한계를 넘기 위해서 구조적인 대안으로 독립적인 작은 단위의 객체(Object)를 만들고 객체들을 조합하고 재사용해서 큰 문제를 해결하는 방식이 객체 지향 프로그래밍 입니다.</p>

<p><img src="/images/02_Post/05_ObjectOrientedUI/01.png" alt="절차적 프로그래밍 예시" /></p>

<div class="figcaption"> 
절차적 프로그래밍 예시
</div>

<h1 id="객체-지향-ui란">객체 지향 UI란?</h1>

<h2 id="ui에서-객체">UI에서 객체</h2>

<p>객체 또는 오브젝트라고 표현하겠습니다. UI에서 객체를 가장 잘 설명할 수 있는 것은 파일 아이콘 입니다. 우리는 파일 아이콘을 통해서 파일의 위치를 옯길 수 있고, 복사, 편집, 압축 또는 삭제까지 할 수 있습니다. 객체란 사용자가 보았을 때, 실제로 존재하는 무언가 처럼 물리적인 경험을 주는 ‘물체’를 의미합니다.</p>

<p>조금 더 추상적인 객체를 설명하면, 우리가 받아보는 ‘이메일’을 예시로 들어볼 수 있습니다. 이메일은 실제로 물리세계에 존재하지는 않지만 우리는 관념적으로 GUI 안 에서 이메일 리스트에서 메일을 확인하고, 중요 표시를 하고 삭제하거나 메일함을 옮길 수 있습니다.</p>

<p>따라서 간단히 축약해서 객체 = 물체 라는 관점으로 접근을 하면 UI 안에서 객체에 대한 이해가 조금 더 쉽습니다. 그리고 객체 지향 UI 안에서 객체는 보통 ‘목적’ ‘명사’를 기반으로 정의됩니다.</p>

<p><img src="/images/02_Post/05_ObjectOrientedUI/02.png" alt="파일 아이콘 예시" /></p>

<div class="figcaption"> 
Mac OS file icon
</div>

<p><img src="/images/02_Post/05_ObjectOrientedUI/03.png" alt="메일함 예시" /></p>

<div class="figcaption"> 
Mac Mail App
</div>

<h2 id="객체와-테스크">객체와 테스크</h2>

<p>파일과 메일을 통해서 객체의 개념을 알아보았는데 이런 객체를 ‘<strong>지향하는 UI’</strong>란 무엇인가에 대해서 알아볼 차례입니다. 객체를 지향하기 위해서는 객체를 움직이고, 상태를 변하게 만들고, 삭제 할 수 있도록 하는 ‘테스크(액션)’가 반드시 필요합니다.</p>

<p>테스크는 보통 ‘동사(명령어)’로 지칭되면서 오브젝트의 액션을 관장합니다. 동사(명령어)를 바탕으로 하는 것은 ‘절차적 프로그래밍’과 상통한다고 할 수 있습니다. 그래서 절차적 프로그래밍과 동일한 한계를 갖고 있습니다. 테스크를 우선 지향하는 UI 체계는 사용자에게 액션을 우선 선택하게 하고 이후에 액션이 적용되는 오브젝트를 선택하게 만들기 때문에 <strong>사용자의 두려움을 유발</strong>할 수 있습니다. (사용자는 액션을 선택하기 전까지는 본인이 어떤 오브젝트에 액션을 적용하게 될지 알 수 없습니다.)</p>

<div class="image-wrap">
  <img src="/images/02_Post/05_ObjectOrientedUI/04.png" alt="버거킹 예시" style="max-width: 60%; height: auto;" />
</div>

<div class="figcaption"> 
대.. 대표적인 테스크 지향 UI 
</div>

<h2 id="객체-지향-ui">객체 지향 UI</h2>

<p>따라서 객체 지향 UI는 ‘물체’를 선택하고 ‘물체’에 대한 ‘액션’을 선택하는 구조로 이루어져있습니다. 객체를 우선으로 하는 구조는 사용자가 원하는 물체를 우선 선택하고 해당 물체에 대응하는 액션과 데이터를 받아서 상호작용하기 때문에 사용자의 이해가 쉽습니다. 또한 같은 성질의 객체 또는 서로 영향을 받는 객체를 바탕으로 다양한 화면을 구성할 수 있으며, 훨씬 적은 수의 화면으로도 다양한 테스크를 소화 할 수 있습니다.</p>

<p>(리스트, 컬렉션, 카드, 태그 등 보편적으로 사용하는 UI 패턴에 훨씬 더 쉽게 추상화 해서 적용할 수 있습니다.)</p>

<p>객체 지향 UI의 원칙</p>

<ol>
  <li><strong>오브젝트를 지각할 수 있고 직접 조정할 수 있다.</strong></li>
  <li><strong>오브젝트는 자신의 성질과 상태를 나타낸다. (선택, 호버, 로딩, 실패, 다운로드 등)</strong></li>
  <li><strong>오브젝트 선택 → 액션 선택의 조작 절차를 바탕으로 한다.</strong></li>
  <li><strong>모든 오브젝트는 서로 협조 또는 상호작용 할 수 있으며 이를 바탕으로 UI 화면을 구성한다.</strong></li>
</ol>
:ET
I"c<!--![](/images/demo/demo-landscape.jpg) -->

<h3 id="들어가기-전에">들어가기 전에.</h3>

<p>우연히 교보문고에서 보았는데 제목부터 흥미로워서 도서대장으로 구매했는데, 내용이 좋아서 이번 위클리에서 공유하려고 합니다. 디자이너에게 친숙하지 않은 <strong>‘객체 지향’</strong> 이라는 단어에 겁 먹을 수 있는데, 책의 내용은 워크북에 조금 더 가까워서 이해가 잘 되는 편입니다.</p>

<p>이번 프리젠테이션에서는 객체 지향 UI 디자인의 개념과 간단한(아마도?) 프로세스만 공유할 예정입니다. 이후에 기회가 되면 <strong>모달과 모달리스, 모달리스 신봉하기</strong> 라는 내용도 공유해보겠습니다.</p>

<p>(모든 형태에 서비스, UI에 객체 지향 UI를 바탕으로 설계 해야 한다는 것은 아닙니다. 중요한 점은 각각 서비스, 구조에 맞는 방법론이 있으며, 그 방법론을 <strong>올바르게</strong> 이해하고 <strong>잘</strong> 적용하는게 중요합니다.)</p>

<p>(무언가 구질구질 하지만.. 부연하면 굳이 방법론이 필요 없는 경우도 있습니다..)</p>

<h1 id="객체-지향-프로그래밍">객체 지향 프로그래밍</h1>

<h2 id="객체-지향-프로그래밍이란">객체 지향 프로그래밍이란?</h2>

<blockquote>
  <p>객체 지향 프로그래밍은 <a href="https://ko.wikipedia.org/wiki/%EC%BB%B4%ED%93%A8%ED%84%B0_%ED%94%84%EB%A1%9C%EA%B7%B8%EB%9E%A8">컴퓨터 프로그램</a> 을 <a href="https://ko.wikipedia.org/wiki/%EB%AA%85%EB%A0%B9%EC%96%B4_(%EC%BB%B4%ED%93%A8%ED%8C%85)">명령어</a> 의 목록으로 보는 시각에서 벗어나 여러 개의 독립된 단위, 즉 “<a href="https://ko.wikipedia.org/wiki/%EA%B0%9D%EC%B2%B4_(%EC%BB%B4%ED%93%A8%ED%84%B0_%EA%B3%BC%ED%95%99)">객체</a>“들의 모임으로 파악하고자 하는 것이다. 각각의 객체는 <a href="https://ko.wikipedia.org/wiki/%EB%A9%94%EC%8B%9C%EC%A7%80">메시지</a>를 주고받고, <a href="https://ko.wikipedia.org/wiki/%EB%8D%B0%EC%9D%B4%ED%84%B0">데이터</a>를 처리할 수 있다.</p>
</blockquote>

<p>참고) <a href="https://ko.wikipedia.org/wiki/%EA%B0%9D%EC%B2%B4_%EC%A7%80%ED%96%A5_%ED%94%84%EB%A1%9C%EA%B7%B8%EB%9E%98%EB%B0%8D">https://ko.wikipedia.org/wiki/객체<em>지향</em>프로그래밍</a></p>

<p>객체 지향 UI 디자인은 이름에서 알 수 있듯이 객체 지향 프로그래밍에서 나온 개념입니다. 객체 지향 프로그래밍은 일종의 개발 패러다임으로 흥미롭게도 <strong>GUI가 등장하면서 급부상한 개념입니다.</strong> 이전에는 <a href="https://ko.wikipedia.org/wiki/%EC%A0%88%EC%B0%A8%EC%A0%81_%ED%94%84%EB%A1%9C%EA%B7%B8%EB%9E%98%EB%B0%8D">절차적 프로그래밍</a>이 주류를 이루었는데, 절차적 프로그래밍이란 쉽게 이야기 하면 명령어를 바탕으로 하는 프로그래밍입니다. (ex 터미널, 커멘드 라인)</p>

<p>GUI가 등장하고 복잡한 화면과 여러개의 창이 함께 동작하게 되면서, 한 개의 명령어를 보내더라도 각 창에서 다른 결과를 보여줘야 했고 서로 상호작용이 가능해야 했습니다.(이런 복잡한 동작은 절차적 프로그래밍으로는 해결하기 매우 어렵습니다. 마치 급여정산을 ‘예/아니오’ 로 해야하는..)</p>

<p>절차적 프로그래밍의 한계를 넘기 위해서 구조적인 대안으로 독립적인 작은 단위의 객체(Object)를 만들고 객체들을 조합하고 재사용해서 큰 문제를 해결하는 방식이 객체 지향 프로그래밍 입니다.</p>
:ET